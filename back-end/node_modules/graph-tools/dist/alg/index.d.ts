import { Graph, IEdgeObj } from "../graph";
import { Order } from "./dfs";
import { IDijkstraAllResult, IDijkstraResult } from "./dijkstra";
import { IResult } from "./floyd-warshall";
declare const alg: {
    components: (g: Graph) => string[][];
    dfs: (g: Graph, vs: string | string[], order: Order) => string[];
    dijkstra: (g: Graph, source: string, weightFn?: (edge: IEdgeObj) => number, edgeFn?: (v: string) => IEdgeObj[] | undefined) => IDijkstraResult;
    dijkstraAll: (g: Graph, weightFn: (edge: IEdgeObj) => number, edgeFn?: ((v: string) => IEdgeObj[] | undefined) | undefined) => IDijkstraAllResult;
    findCycles: (g: Graph) => string[][];
    floydWarshall: (g: Graph, weightFn?: ((edge: IEdgeObj) => number) | undefined, edgeFn?: ((v: string) => IEdgeObj[] | undefined) | undefined) => IResult;
    isAcyclic: (g: Graph) => boolean;
    postorder: (g: Graph, vs: string | string[]) => string[];
    preorder: (g: Graph, vs: string | string[]) => string[];
    prim: (g: Graph, weightFunc: (edge: IEdgeObj) => number) => Graph;
    tarjan: (g: Graph) => string[][];
    topsort: (g: Graph) => string[];
};
export { alg };
