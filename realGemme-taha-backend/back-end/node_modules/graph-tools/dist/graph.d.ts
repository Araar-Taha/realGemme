export declare type LabelValue = string | number | boolean | object | undefined;
export declare type KeyValue = string | number;
export declare type NameValue = string | number;
export interface IGraphConstructor {
    directed?: boolean;
    multigraph?: boolean;
    compound?: boolean;
}
export interface INodes {
    [nodename: string]: LabelValue;
}
export interface ICount {
    [key: string]: number;
}
export interface INodeCount {
    [key: string]: ICount;
}
export interface IEdgeLabels {
    [e: string]: LabelValue;
}
export interface IEdgeObj {
    [key: string]: string | undefined;
    v: string;
    w: string;
    name?: string;
}
export interface IEdgeObjs {
    [e: string]: IEdgeObj;
}
export interface IEdgeObjsObj {
    [v: string]: IEdgeObjs;
}
export interface IParentObjs {
    [v: string]: KeyValue;
}
export interface IChildrenObjs {
    [v: string]: {
        [e: string]: boolean;
    };
}
export declare type IDefaultLabelFn = (v: any) => LabelValue;
export declare type DefaultEdgeLabelFn = (v: string, w: string, name: string) => LabelValue;
declare class Graph {
    readonly directed: boolean;
    readonly multigraph: boolean;
    readonly compound: boolean;
    private label;
    private nodesObj;
    private parentObj;
    private childrenObj;
    private in;
    private preds;
    private out;
    private sucs;
    private edgeObjs;
    private edgeLabels;
    private nodeCountNumber;
    private edgeCountNumber;
    constructor(opt?: IGraphConstructor);
    setGraph(label: LabelValue): Graph;
    graph(): LabelValue;
    setDefaultNodeLabel(newDefault: LabelValue | IDefaultLabelFn): Graph;
    nodeCount(): number;
    nodes(): string[];
    sources(): string[];
    sinks(): string[];
    setNodes(vs: string[], value?: LabelValue): Graph;
    setNode(v: KeyValue, value?: LabelValue): Graph;
    node(v: KeyValue): LabelValue;
    hasNode(v: KeyValue): boolean;
    removeNode(v: KeyValue): Graph;
    setParent(v: KeyValue, parent?: KeyValue): Graph;
    removeFromParentsChildList(v: KeyValue): void;
    parent(v: KeyValue): KeyValue | undefined;
    children(v?: KeyValue): string[] | undefined;
    predecessors(v: KeyValue): string[] | undefined;
    successors(v: KeyValue): string[] | undefined;
    neighbors(v: KeyValue): string[] | undefined;
    isLeaf(v: KeyValue): boolean;
    filterNodes(filter: (v: string) => boolean): Graph;
    setDefaultEdgeLabel(newDefault: LabelValue | IDefaultLabelFn): this;
    edgeCount(): number;
    edges(): IEdgeObj[];
    setPath(vs: string[], value?: LabelValue): Graph;
    setEdge(edgeobj: IEdgeObj, value?: LabelValue): Graph;
    setEdge(v: KeyValue, w: KeyValue, value?: LabelValue, name?: NameValue): Graph;
    edge(v: KeyValue, w: KeyValue, name?: NameValue): LabelValue;
    edge(edgeObj: IEdgeObj): LabelValue;
    hasEdge(v: KeyValue, w: KeyValue, name?: NameValue): boolean;
    hasEdge(edgeObj: IEdgeObj): boolean;
    removeEdge(v: string, w: string, name?: string): Graph;
    removeEdge(edgeObj: IEdgeObj): Graph;
    inEdges(v: string, u?: string): IEdgeObj[] | undefined;
    outEdges(v: string, w?: string): IEdgeObj[] | undefined;
    nodeEdges(v: string, w?: string): IEdgeObj[] | undefined;
    private defaultNodeLabelFn;
    private defaultEdgeLabelFn;
}
export { Graph };
